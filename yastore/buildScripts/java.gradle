// Configuration for java projects

dependencies {
    compile(
        [group: 'javax.validation', name : 'validation-api', version : "${validationAPIVersion}"],
        [group: 'org.slf4j', name : 'slf4j-api', version : "${slf4jVersion}"],

        [group: 'javax.ws.rs', name : 'jsr311-api', version : '1.1.1'],
        [group: 'javax.xml.bind', name : 'jaxb-api', version : '2.2.7'],

        [group: 'com.google.guava', name : 'guava', version : '17.0'],

        [group: 'commons-lang', name : 'commons-lang', version : "${commonsLangVersion}"],
        [group: 'commons-collections', name : 'commons-collections', version : "${commonsCollectionVersion}"],
        [group: 'commons-beanutils', name : 'commons-beanutils', version : "${commonsBeanUtilsVersion}"],
        [group: 'commons-io', name : 'commons-io', version : '2.4'],
        
		[group: 'joda-time', name : 'joda-time', version : "${jodaTimeVersion}"],
    	[group: 'org.joda', name : 'joda-money', version : '0.9.1'],

        [group: 'org.springframework', name : 'spring-core', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-context', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-beans', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-aop', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-oxm', version : "${springVersion}"],
            
        [group: 'com.typesafe.akka', name : 'akka-actor_2.11', version : "${akkaVersion}"],
    )
    
    // needed for testng reports and some optional dependencies
    compile("com.google.inject:guice:3.0") {
    	exclude group: 'asm'
    }

    testCompile(
    	[group: 'org.springframework', name : 'spring-test', version : "${springVersion}"],
        [group: 'org.mockito', name : 'mockito-core', version : '1.9.5'], // don't use mockito-all -> old hamcrest
        [group: 'org.testng', name : 'testng', version : '6.8.7'],
        [group: 'org.uncommons', name : 'reportng', version : '1.1.3'],
        [group: 'org.easytesting', name : 'fest-assert-core', version : '2.0M10'],
        [group: 'velocity', name : 'velocity', version : '1.4'],
        [group: 'org.hamcrest', name : 'hamcrest-core', version : '1.3'],
        [group: 'org.hamcrest', name : 'hamcrest-library', version : '1.3'],        
        //[group: 'com.jayway.restassured', name : 'rest-assured', version : '1.7.2'],
    )
}

compileJava.options*.compilerArgs = [
	"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
	"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
	"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
	"-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
	"-Xlint:unchecked", "-Xlint:-options", "-Werror"
]

compileTestJava.options*.compilerArgs = [
	"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
	"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
	"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
	"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
	"-Xlint:-unchecked", "-Xlint:-options"]

compileJava {
    sourceCompatibility=1.7
    targetCompatibility=1.7
}
compileTestJava {
    sourceCompatibility=1.7
    targetCompatibility=1.7
}

// sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

// ensure that test resources (src/test/resources) are added to CLASSPATH;
// see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
// http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath
sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += files(output.resourcesDir) + runtimeClasspath + configurations.provided
    }
}

// Use TestNG instead of the default JUnit
test {
    useTestNG() {
        suiteXmlBuilder().suite(name: 'estore-tests', parallel: 'tests') {
            test (name : 'all-tests') {
                packages {
                    'package' (name: 'com.yastore.*')
                }
            }
        }
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    ext.useDefaultListeners = true
    ext.workingDirectory = 'build/'
}

jar {
    manifest.attributes["Created-By"] =
		"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
    manifest.attributes["Implementation-Title"] = project.name
    manifest.attributes["Implementation-Version"] = project.version

    from("${rootProject.projectDir}") {
        include "license.txt"
        include "notice.txt"
        into "META-INF"
        expand(copyright: new Date().format("yyyy"), version: project.version)
    }
}

javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    options.links(project.ext.javadocLinks)
    //options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    
    classpath = configurations.compile + configurations.provided 
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = "sources"
    from sourceSets.main.allJava.srcDirs
    include "**/*.java", "**/*.aj"
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
	
