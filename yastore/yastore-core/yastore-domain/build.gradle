apply plugin: 'java'

description = "Yet Another eStore :: Core Domain"

configurations {
    querydslapt
}

dependencies {
    compile (
    	project (':yastore-core:yastore-commons'),
    	
    	[group: 'javax.validation', name : 'validation-api', version : "${validationAPIVersion}"],
    	[group: 'joda-time', name : 'joda-time', version : "${jodaTimeVersion}"],
    	[group: 'org.joda', name : 'joda-money', version : '0.9.1'],
    	[group: 'org.jadira.usertype', name : 'usertype.spi', version : "${jadiraVersion}"],
    	
    	[group: 'org.springframework', name : 'spring-context', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-orm', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-jdbc', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-tx', version : "${springVersion}"],
        [group: 'org.springframework', name : 'spring-aspects', version : "${springVersion}"],
        
        // Hibernate
        [group: 'org.hibernate.javax.persistence', name : 'hibernate-jpa-2.1-api', version : '1.0.0.Final'],
        [group: 'org.hibernate', name : 'hibernate-entitymanager', version : "${hibernateVersion}"],
        [group: 'org.hibernate', name : 'hibernate-core', version : "${hibernateVersion}"],
        [group: 'org.hibernate', name : 'hibernate-envers', version : "${hibernateVersion}"],
        // BoneCP
        [group: 'com.jolbox', name : 'bonecp', version : "${boneCPVersion}"],
        // JDBC drivers
        [group: 'org.hsqldb', name : 'hsqldb', version : '2.2.9'],
        [group: 'org.postgresql', name : 'postgresql', version : '9.3-1101-jdbc41'],
        [group: 'mysql', name : 'mysql-connector-java', version : '5.1.31'],
        
        [group: 'net.sf.opencsv', name : 'opencsv', version : "${openCSVVersion}"]
    )
    
    compile("org.jadira.usertype:usertype.core:${jadiraVersion}") {
    	exclude group: 'dom4j'
		exclude group: 'org.hibernate'
		exclude group: 'org.hibernate.common'
    }
    
    // Spring & Spring Data JPA
	compile("org.springframework.data:spring-data-jpa:${springDataVersion}") {
        exclude group: 'org.springframework', module: 'spring-core'
        exclude group: 'org.springframework', module: 'spring-beans'
        exclude group: 'org.springframework', module: 'spring-orm'
        exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'org.springframework', module: 'spring-aop'
        exclude group: 'org.springframework', module: 'spring-tx'
    }
	//compile("org.springframework.data:spring-data-commons-core:1.4.1.RELEASE") {
	//	exclude group: 'org.springframework'
    //}    
	compile("org.springframework.data:spring-data-rest-webmvc:${springRESTVersion}") {
		exclude group: 'org.springframework'
    }
    compile("com.mysema.querydsl:querydsl-jpa:${querydslVersion}") {
		exclude group: 'org.hibernate.javax.persistence', module: 'hibernate-jpa-2.0-api'
		exclude group: 'asm', module: 'asm'
    }
    compile("com.mysema.querydsl:querydsl-core:${querydslVersion}") {
		exclude group: 'org.hibernate.javax.persistence', module: 'hibernate-jpa-2.0-api'
		exclude group: 'asm', module: 'asm'
    }
    
	querydslapt (
    	[group: 'com.mysema.querydsl', name : 'querydsl-apt', version : "${querydslVersion}"]
    )    
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
        }
    }
}

tasks.withType(Compile) {
  options.compilerArgs << "-Xlint:all" << "-Werror"
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
	println "clean up all generated sources"
	sourceSets.generated.java.srcDirs.each {File generatedSrcDirs ->
    	println "    delete files in folder: $generatedSrcDirs.path"
    	FileTree tree = fileTree (dir: generatedSrcDirs);  
    	tree.each { File file ->
        	delete(file)
    	}
	}
}

idea {
    module {
        sourceDirs += file('src/main/generated')
    }
}

